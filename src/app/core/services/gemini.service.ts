import { Injectable } from '@angular/core';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { environment } from '../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class GeminiService {
  private genAI: GoogleGenerativeAI;
  private model: any;
  private currentContext: string = '';
  private messageCount: number = 0;

  constructor() {
    this.genAI = new GoogleGenerativeAI(environment.geminiApiKey);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });
  }

  async startStory(genre: string, language: string): Promise<string> {
    this.messageCount = 0;
    const prompt = `You are an interactive book in which the reader can choose how the plot will unfold.

The type of the book is ${genre}, and its language is ${language}. Just start the story without telling that you are starting. Add title at the beginning with the tag <Title>Title</Title>. Each time, the user will have 3 options to choose from (generated by you (A, B, C) labeled accordingly:

<Option A>You click the button and wait to see what happens</Option A>

In addition, add a verbal description of the image, which will describe the scene a bit. Label it like this:

<Image description>Description</Image description>

Whole message should be in the language described previously. Each history can end and it depends on your choices. If the story will end (it can be ended after minimum 5 messages, but the longest 20) - there will be two options:

<End Return>The last option - you will end your story and there wont be any new options</End Return>
<Continue Story>Something strange will happen - like god mode or something - and your store will be in the endless mode</Continue Story>`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      this.currentContext = prompt + '\n\nStory so far:\n' + response.text();
      return response.text();
    } catch (error) {
      console.error('Error generating story:', error);
      throw error;
    }
  }

  async continueStory(selectedOption: string): Promise<string> {
    this.messageCount++;
    const shouldConsiderEnding = this.messageCount >= 5;
    
    const prompt = `${this.currentContext}\n\nUser selected: ${selectedOption}\n\nContinue the story based on this choice. ${
      shouldConsiderEnding ? 'Since we have reached at least 5 messages, you can decide to end the story with <End Return> or <Continue Story> tags if you feel it\'s appropriate. If you decide to continue normally, provide the standard options A, B, C.' : 'Remember to provide new options (A, B, C)'
    } Always include an image description for the new scene. Use the same format as before.`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      this.currentContext = prompt + '\n' + response.text();
      return response.text();
    } catch (error) {
      console.error('Error continuing story:', error);
      throw error;
    }
  }
} 